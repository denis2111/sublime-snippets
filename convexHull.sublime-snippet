<snippet>
	<content><![CDATA[
struct point{
	long long x, y;

	bool operator <(const point &oth) const{
		if (x == oth.x) return y < oth.y;
		return x < oth.x;
	}

	bool operator ==(const point &oth) const{
		return x == oth.x && y == oth.y;
	}
};


point fst;
struct convexHull{
	vector<point> P;
	vector<point> ans;
	bool bad = false;
	
	void add(point crt){
		bad = true;
		P.push_back(crt);
	}

	void instantiate(vector<point> &crt){
		bad = true;
		P = crt;
	}
	
	static long long det(point A, point B, point C){
		return A.x * B.y + A.y * C.x + B.x * C.y - A.x * C.y - A.y * B.x - B.y * C.x;
	}

	static long long dist(point A, point B){
		return (A.x - B.x) * (A.x - B.x) + (A.y - B.y) * (A.y - B.y);
	}

	static bool comp(point a, point b) {
		if (det(fst,a,b) == 0) return dist(fst,a) < dist(fst,b);
		return det(fst,a,b) < 0;
	}

	vector<point> getConvexHull(){
		if (bad){
			ans.clear();
			if (P.empty()) return ans;
			fst = P[0];
			for (auto it : P) fst = min(fst, it);

			for (auto it = P.begin(); it!=P.end(); it++){
				if (*it == fst){
					P.erase(it);
					break;
				}
			}

			sort(P.begin(), P.end(), comp);
			ans.push_back(fst);
			for (auto it : P){
				while (ans.size() >= 2 && det(ans[ans.size() - 2], ans[ans.size() - 1], it) >= 0){
					ans.pop_back();
				}
				ans.push_back(it);
			}
		}
		return ans;
	}
};
convexHull ch;
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>__convexHull</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
